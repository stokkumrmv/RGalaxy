library(ggplot2)
sessionI
sessionInfo()
libray(DESeq2)
library(DESeq2)
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[1]]
assayPlots$Boxplot[[4]]
map(assayNest$data, length(unique(.x$Condition)))
map(assayNest$data, ~ length(unique(.x$Condition)))
assayPlots$Boxplot[[8]]
View(assayPlots)
assayPlots$Boxplot[[6]]
assayPlots$Boxplot[[8]]
assayPlots$Boxplot[[9]]
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot() + ggtitle(title)
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[9]]
df.waist <- assayPlots$data[[9]]
View(df.waist)
df.waist %>% group_by(RelTime) %>% tally()
df.waist %>% group_by(Subject) %>% tally()
df.waist %>% group_by(Subject, RelTime) %>% tally()
source("https://bioconductor.org/biocLite.R")
biocLite("RGalaxy")
library(RGalaxy)
?RGalaxy
?RGalaxy::galaxy
library(reportgenr)
AnnotateCounts
`deseq-with_sampData-filtered` <- readRDS("C:/Users/twillerthtlv/Documents/My Received Files/deseq-with_sampData-filtered.rds")
dds <- readRDS("C:/Users/twillerthtlv/GitLab/DataScience-MSB/Projects/MicrobiomeEverton/data/deseq-with_sampData-filtered.rds")
View(dds)
dds
shiny::runApp('GitLab/DataScience-MSB/PhenoDb/inst/ShinyDashboard')
runApp('GitLab/DataScience-MSB/PhenoDb/inst/ShinyDashboard')
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, rstudioapi::askForPassword(), skey)
#break here to enter password in console
# Then press Ctrl+L to clear your console ;)
#  Anyone looking over your shoulder can see your plaintext password!
#  This is partly why we'd like a UI
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "nutritech"   # OR part of the study code
### The rest of the script gather the data for the given study and saves it to a file
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- "nutritech"     # Set part of the study title to match with grep()
studyCode <- NULL   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
View(studies)
lapply(studies, `[` "title"])
lapply(studies, `[` "title")
lapply(studies, `[`, "title")
sapply(studies, `[`, "title")
grep("nutritech", sapply(studies, `[`, "title"))
grep("dynamic", sapply(studies, `[`, "title"))
grep("Nutritech", sapply(studies, `[`, "title"))
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- "Nutritech"     # Set part of the study title to match with grep()
studyCode <- NULL   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
View(studyFeatures)
studyFeaturesWide <- dcast(data = studyFeatures,
formula = Feature + Assay ~ Property, value.var = "Value")
View(studyFeaturesWide)
studySubjects <- getSubjectsDataframe(assays)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, rstudioapi::askForPassword(), skey)
studySubjects <- getSubjectsDataframe(assays)
subjectsDf <- getSubjectsForStudy(studyToken)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, rstudioapi::askForPassword(), skey)
subjectsDf <- getSubjectsForStudy(studyToken)
studySubjects <- subjectsDf
studySubjectsWithData = sapply(studySubjects, function(x) length(x) >
0)
if (!any(studySubjectsWithData)) {
warning("None of the available subjects have any data (length==0)")
return(NULL)
}
dataframeSubjects <- data.frame(do.call(rbind, studySubjects))
dataframeSubjects <- dataframeSubjects %>% mutate_if(function(x) !is.null(unlist(x)),
unlist, use.names = FALSE)
View(dataframeSubjects)
dataframeSubjects %>% mutate_if(function(x) !is.null(unlist(x)),
unlist, use.names = FALSE)
length(unlist(dataframeSubjects$medication.Supplement.DietUse))
length((dataframeSubjects$medication.Supplement.DietUse))
dataframeSubjects$medication.Supplement.DietUse
View(studySubjects)
load("~/TNO/KIP BMH - 3.1 Biomarkers BDC - Team/Work/WGCNA/ADT-liver-network/data/mouse.data.RData")
ypar.data
View(ypar.data)
dim(expr.liver.data)
setdiff(names(expr.liver.data), names(ypar.data))
setdiff(names(ypar.data), names(expr.liver.data))
setdiff(colnames(ypar.data), colnames(expr.liver.data))
setdiff(names(expr.liver.data), colnames(ypar.data))
setdiff(colnames(expr.liver.data), colnames(ypar.data))
mouse.trt
duplicated(mouse(trt))
duplicated(mouse.trt)
duplicated(names(mouse.trt))
duplicated(names(mouse.nrs))
duplicated(mouse.nrs)
dim(expr.liver.data)
table(mouse.trt)
View(expr.liver.data.genes)
ypar.data
setwd("~/GitLab/DataScience-MSB/GalaxyProjects/RGalaxify")
pkgdown::build_site()
pkgdown::build_site()
